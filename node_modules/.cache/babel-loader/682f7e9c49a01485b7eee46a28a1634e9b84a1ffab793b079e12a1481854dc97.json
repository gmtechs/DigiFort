{"ast":null,"code":"var _jsxFileName = \"/home/shadowscript/Websites/AgriVerify/frontend/src/components/CertifyCrop.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CertifyCrop = ({\n  agriVerifyContract\n}) => {\n  _s();\n  const [certifyCropId, setCertifyCropId] = useState('');\n  const onCertifyCrop = async () => {\n    if (agriVerifyContract && certifyCropId) {\n      try {\n        const tx = await agriVerifyContract.certifyCrop(certifyCropId);\n        await tx.wait();\n        alert(`Crop ${certifyCropId} certified successfully`);\n        setCertifyCropId('');\n      } catch (error) {\n        console.error('Error certifying crop:', error);\n        alert('Failed to certify crop. Please try again.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-green-800 mb-6\",\n      children: \"Certify Crop (Owner Only)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: certifyCropId,\n        onChange: e => setCertifyCropId(e.target.value),\n        placeholder: \"Enter Crop ID to Certify\",\n        min: \"1\",\n        required: true,\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCertifyCrop,\n        className: \"button\",\n        children: \"Certify Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(CertifyCrop, \"g8INf2DFC7FKvGyS51o0RupiV/M=\");\n_c = CertifyCrop;\nexport default CertifyCrop;\nvar _c;\n$RefreshReg$(_c, \"CertifyCrop\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CertifyCrop","agriVerifyContract","_s","certifyCropId","setCertifyCropId","onCertifyCrop","tx","certifyCrop","wait","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","min","required","onClick","_c","$RefreshReg$"],"sources":["/home/shadowscript/Websites/AgriVerify/frontend/src/components/CertifyCrop.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst CertifyCrop = ({ agriVerifyContract }) => {\n  const [certifyCropId, setCertifyCropId] = useState('');\n\n  const onCertifyCrop = async () => {\n    if (agriVerifyContract && certifyCropId) {\n      try {\n        const tx = await agriVerifyContract.certifyCrop(certifyCropId);\n        await tx.wait();\n        alert(`Crop ${certifyCropId} certified successfully`);\n        setCertifyCropId('');\n      } catch (error) {\n        console.error('Error certifying crop:', error);\n        alert('Failed to certify crop. Please try again.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <h2 className=\"text-2xl font-semibold text-green-800 mb-6\">\n        Certify Crop (Owner Only)\n      </h2>\n      <div className=\"form-group\">\n        <input\n          type=\"number\"\n          value={certifyCropId}\n          onChange={(e) => setCertifyCropId(e.target.value)}\n          placeholder=\"Enter Crop ID to Certify\"\n          min=\"1\"\n          required\n          className=\"input\"\n        />\n        <button onClick={onCertifyCrop} className=\"button\">\n          Certify Crop\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CertifyCrop;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIJ,kBAAkB,IAAIE,aAAa,EAAE;MACvC,IAAI;QACF,MAAMG,EAAE,GAAG,MAAML,kBAAkB,CAACM,WAAW,CAACJ,aAAa,CAAC;QAC9D,MAAMG,EAAE,CAACE,IAAI,CAAC,CAAC;QACfC,KAAK,CAAC,QAAQN,aAAa,yBAAyB,CAAC;QACrDC,gBAAgB,CAAC,EAAE,CAAC;MACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CD,KAAK,CAAC,2CAA2C,CAAC;MACpD;IACF;EACF,CAAC;EAED,oBACEV,OAAA;IAAKa,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBd,OAAA;MAAIa,SAAS,EAAC,4CAA4C;MAAAC,QAAA,EAAC;IAE3D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLlB,OAAA;MAAKa,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBd,OAAA;QACEmB,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAEhB,aAAc;QACrBiB,QAAQ,EAAGC,CAAC,IAAKjB,gBAAgB,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAClDI,WAAW,EAAC,0BAA0B;QACtCC,GAAG,EAAC,GAAG;QACPC,QAAQ;QACRb,SAAS,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC,eACFlB,OAAA;QAAQ2B,OAAO,EAAErB,aAAc;QAACO,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAEnD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACf,EAAA,CAtCIF,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAwCjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}